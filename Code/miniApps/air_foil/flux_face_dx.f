C        Generated by TAPENADE     (INRIA, Tropics team)
C  Tapenade 3.10 (r5498) - 20 Jan 2015 09:48
C
C  Differentiation of flux_face in forward (tangent) mode:
C   variations   of useful results: res1 res2
C   with respect to varying inputs: res1 res2 q1 q2 x1 x2 adt1
C                adt2
C   RW status of diff variables: res1:in-out res2:in-out q1:in
C                q2:in x1:in x2:in adt1:in adt2:in
C
C
C
C
C
      SUBROUTINE FLUX_FACE_DX(x1, x1d, x2, x2d, q1, q1d, q2, q2d, adt1, 
     +                       adt1d, adt2, adt2d, res1, res1d, res2, 
     +                       res2d)
      IMPLICIT NONE
      REAL*8 gam, gm1, cfl, eps, mach, alpha
C
      COMMON /constants/ gam, gm1, cfl, eps, mach, alpha
C
C
      INTEGER n, r
C
      REAL*8 x1(2), x2(2), q1(4), q2(4), adt1, adt2, res1(4), res2(4), 
     +       dx, dy, mu, r1i, u1, v1, p1, vol1, r2i, u2, v2, p2, vol2, f
     +       (4)
      REAL*8 x1d(2), x2d(2), q1d(4), q2d(4), adt1d, adt2d, res1d(4), 
     +       res2d(4), dxd, dyd, mud, r1id, u1d, v1d, p1d, vol1d, r2id, 
     +       u2d, v2d, p2d, vol2d, fd(4)
      INTEGER ii1
C
C
      dxd = x1d(1) - x2d(1)
      dx = x1(1) - x2(1)
      dyd = x1d(2) - x2d(2)
      dy = x1(2) - x2(2)
      mud = 0.5d0*eps*(adt1d+adt2d)
      mu = 0.5d0*(adt1+adt2)*eps
C
      r1id = -(q1d(1)/q1(1)**2)
      r1i = 1.d0/q1(1)
      u1d = r1id*q1(2) + r1i*q1d(2)
      u1 = r1i*q1(2)
      v1d = r1id*q1(3) + r1i*q1d(3)
      v1 = r1i*q1(3)
      p1d = gm1*(q1d(4)-0.5d0*(r1id*(q1(2)**2+q1(3)**2)+r1i*(2*q1(2)*q1d
     +  (2)+2*q1(3)*q1d(3))))
      p1 = gm1*(q1(4)-0.5d0*r1i*(q1(2)**2+q1(3)**2))
      vol1d = u1d*dy + u1*dyd - v1d*dx - v1*dxd
      vol1 = u1*dy - v1*dx
C
      r2id = -(q2d(1)/q2(1)**2)
      r2i = 1.d0/q2(1)
      u2d = r2id*q2(2) + r2i*q2d(2)
      u2 = r2i*q2(2)
      v2d = r2id*q2(3) + r2i*q2d(3)
      v2 = r2i*q2(3)
      p2d = gm1*(q2d(4)-0.5d0*(r2id*(q2(2)**2+q2(3)**2)+r2i*(2*q2(2)*q2d
     +  (2)+2*q2(3)*q2d(3))))
      p2 = gm1*(q2(4)-0.5d0*r2i*(q2(2)**2+q2(3)**2))
      vol2d = u2d*dy + u2*dyd - v2d*dx - v2*dxd
      vol2 = u2*dy - v2*dx
C
      DO ii1=1,4
        fd(ii1) = 0.0
      ENDDO
      fd(1) = 0.5d0*(vol1d*q1(1)+vol1*q1d(1)+vol2d*q2(1)+vol2*q2d(1))
      f(1) = 0.5d0*(vol1*q1(1)+vol2*q2(1))
      fd(2) = 0.5d0*(vol1d*q1(2)+vol1*q1d(2)+p1d*dy+p1*dyd+vol2d*q2(2)+
     +  vol2*q2d(2)+p2d*dy+p2*dyd)
      f(2) = 0.5d0*(vol1*q1(2)+p1*dy+vol2*q2(2)+p2*dy)
      fd(3) = 0.5d0*(vol1d*q1(3)+vol1*q1d(3)-p1d*dx-p1*dxd+vol2d*q2(3)+
     +  vol2*q2d(3)-p2d*dx-p2*dxd)
      f(3) = 0.5d0*(vol1*q1(3)-p1*dx+vol2*q2(3)-p2*dx)
      fd(4) = 0.5d0*(vol1d*(q1(4)+p1)+vol1*(q1d(4)+p1d)+vol2d*(q2(4)+p2)
     +  +vol2*(q2d(4)+p2d))
      f(4) = 0.5d0*(vol1*(q1(4)+p1)+vol2*(q2(4)+p2))
C
      DO n=1,4
        fd(n) = fd(n) + mud*(q1(n)-q2(n)) + mu*(q1d(n)-q2d(n))
        f(n) = f(n) + mu*(q1(n)-q2(n))
        res1d(n) = res1d(n) + fd(n)
        res1(n) = res1(n) + f(n)
        res2d(n) = res2d(n) - fd(n)
        res2(n) = res2(n) - f(n)
      ENDDO
C
      RETURN
      END
